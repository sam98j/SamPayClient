{"version":3,"sources":["pages/Dashboard/SubmitTransfer/styles.module.scss","pages/Dashboard/transferMoney/styles.module.scss","components/SingleReceiver/singlereceiver.module.scss","pages/Login/Login.module.scss","components/SideBar/SideBar.module.scss","components/SingleTransaction/styles.module.scss","pages/Dashboard/AccountCard/accountcard.module.scss","pages/Home/Home.module.scss","pages/Dashboard/transactionsHistory/styles.module.scss","pages/Dashboard/ReceviersHistory/receviershistory.module.scss","components/NavBar/NavBar.module.scss","components/Notifications/notifications.module.scss","pages/Profile/Profile.module.scss","components/Loading/Loading.module.scss","components/LoginNav/LoginNav.module.scss","components/AppName/AppName.module.scss","pages/Dashboard/Dashboard.module.scss","components/TransLoading/trans_loading.module.scss","App.module.scss","pages/Welcome/Welcome.module.scss","types/enums/system.ts","components/AppName/AppName.tsx","components/SideBar/SideBar.tsx","apis/system.ts","types/enums/transactions.ts","apis/transactions.ts","components/TransLoading/TransLoading.tsx","pages/Dashboard/transferMoney/component.tsx","components/SingleTransaction/component.tsx","pages/Dashboard/transactionsHistory/component.tsx","types/enums/auth.ts","components/SingleReceiver/SingleReceiver.tsx","pages/Dashboard/ReceviersHistory/ReceviersHistory.tsx","pages/Dashboard/AccountCard/AccountCard.tsx","pages/Dashboard/Dashboard.tsx","components/Cards/Cards.tsx","pages/Reports/Reports.tsx","pages/Support/Support.tsx","components/Notifications/Notifications.tsx","components/NavBar/NavBar.tsx","apis/auth.ts","pages/Profile/Profile.tsx","pages/Home/Home.tsx","components/Loading/Loading.tsx","components/LoginNav/LoginNav.tsx","pages/Login/Login.tsx","pages/Welcome/Welcome.tsx","pages/Dashboard/SubmitTransfer/component.tsx","App.tsx","store/reducers/auth.ts","store/reducers/system.ts","store/reducers/transactions.ts","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","SystemActionsTypes","AppName","className","styles","SideBar","currentRoute","useSelector","state","system","style","borderLeftColor","to","color","Provider","value","size","profile","img","TransTypes","TransferStatus","SetCurrentRoute","routeName","dispatch","type","SET_CURRENT_ROUTE","payload","TransLoading","loader","TransferMoney","useState","receiverPhone","isLoading","setState","btnRef","useRef","currentTransfer","transactions","useDispatch","useEffect","current","disabled","TRANS_LOADING","MakeTransaction","sectionName","transferTypesContainer","TransferWithPhone","Country","Phone","name","placeholder","onChange","e","target","Img","onClick","phone","preventDefault","a","RECEIVER_NOT_FOUND","SET_TRANSACTION","reqBody","ReqConfig","method","headers","body","JSON","stringify","fetch","process","response","status","json","receiver","console","log","Error","ref","transferBtn","SingleTransaction","props","transaction","amount","container","TransactionsHistory","AuthTypes","transHistory","auth","client","transactionsHistory","Transactions","TransactionsDate","map","singleTrans","SingleReceiver","element","date","singleReceiver","details","sendBtn","ReceviersHistory","receiversHistory","receviershistory","ele","length","nodata","AccountCard","account","_id","accountCard","Balance","balance","Account","Dashboard","DashBoard","connect","setCurrentRoute","Notifications","notifications","notificationsCount","NavBar","AppCenter","signout_client","SIGN_OUT","Profile","SignOut_Btn","Home","RoutesArea","component","path","Cards","Reports","Support","Component","Loading","LoginNav","NavLinks","Login","clientCredentioal","password","isAuthorized","Boolean","handleChange","MainArea","LoginForm","onSubmit","Credentioal","LOGIN_SUCCESS","LOGIN_FAILD","config","loginData","htmlFor","backgroundColor","href","ForgetPassword","SocialMedia","VectorsArea","src","alt","Welcome","exact","SubmitTrans","ConfirmTransfer","Container","Header","IMG","Name","firstName","lastName","Details","DetailsContainer","icon","faUniversity","faPhone","Submit","data","Number","SUBMIT_TRANSFER_ERR","SUBMIT_TRANSFER","token","localStorage","getItem","authorization","submitTransRes","ADD_RECEIVER_TO_HISTORY","App","isLogged","client_id","query","on","notification","RECEIVE_MONEY","receiveMoney","Audio","play","AUTH_FAILD","AUTH_SUCCESS","TRANS_ERR","SubmitTransferModal","initState","loginReducer","action","setItem","newBalance","newTransaction","updatedBalance","systemReducer","sender","transAmount","receiverEle","submitTransfer","transactionsReducer","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.ad12081a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ConfirmTransfer\":\"styles_ConfirmTransfer__34w8F\",\"Container\":\"styles_Container__1Vbdk\",\"Header\":\"styles_Header__3bCct\",\"Name\":\"styles_Name__NYAKu\",\"IMG\":\"styles_IMG__2ttQk\",\"Details\":\"styles_Details__3fd1-\",\"DetailsContainer\":\"styles_DetailsContainer__2TQm4\",\"Submit\":\"styles_Submit__2PFaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MakeTransaction\":\"styles_MakeTransaction__r9CUd\",\"transferTypesContainer\":\"styles_transferTypesContainer__1OLdL\",\"transferBtn\":\"styles_transferBtn__18Evf\",\"TransferWithPhone\":\"styles_TransferWithPhone__10-KY\",\"Country\":\"styles_Country__38q22\",\"Phone\":\"styles_Phone__1_FP1\",\"Img\":\"styles_Img__3rrWV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"singleReceiver\":\"singlereceiver_singleReceiver__1xG6x\",\"img\":\"singlereceiver_img__3r57R\",\"details\":\"singlereceiver_details__20HSJ\",\"date\":\"singlereceiver_date__30WoT\",\"sendBtn\":\"singlereceiver_sendBtn__1Viqh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__2rkDV\",\"MainArea\":\"Login_MainArea__3l-qv\",\"LoginForm\":\"Login_LoginForm__1bXz2\",\"ForgetPassword\":\"Login_ForgetPassword__1CUpE\",\"SocialMedia\":\"Login_SocialMedia__3ZQoh\",\"VectorsArea\":\"Login_VectorsArea__2OOCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideBar\":\"SideBar_SideBar__38KVu\",\"profile\":\"SideBar_profile__2lAdZ\",\"img\":\"SideBar_img__i6oS9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SingleTransaction\":\"styles_SingleTransaction__2I6C6\",\"Img\":\"styles_Img__1brZU\",\"container\":\"styles_container__1SYbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountCard\":\"accountcard_accountCard__8rcPx\",\"Balance\":\"accountcard_Balance__15B6C\",\"Account\":\"accountcard_Account__2F-RZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__20gYL\",\"RoutesArea\":\"Home_RoutesArea__jysit\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Transactions\":\"styles_Transactions__JNvdz\",\"TransactionsDate\":\"styles_TransactionsDate__Ce7wb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"receviershistory\":\"receviershistory_receviershistory__2-nPC\",\"nodata\":\"receviershistory_nodata__UiT9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__Cqnef\",\"AppCenter\":\"NavBar_AppCenter__3-zHx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notifications\":\"notifications_notifications__3UbOq\",\"notificationsCount\":\"notifications_notificationsCount__3n5ft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__8WNqz\",\"SignOut_Btn\":\"Profile_SignOut_Btn__Uw_d7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"Loading_Loading__tNCSj\",\"loader\":\"Loading_loader__1Eu3_\",\"Animate\":\"Loading_Animate__2jnHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginNav\":\"LoginNav_LoginNav__3gr3D\",\"NavLinks\":\"LoginNav_NavLinks__1Gasa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppName\":\"AppName_AppName__1IxQa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DashBoard\":\"Dashboard_DashBoard__1cMKu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"trans_loading_loader__2CXg7\",\"animate\":\"trans_loading_animate__7ns0u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Welcome\":\"Welcome_Welcome__3iG7D\"};","export enum SystemActionsTypes {\n    SET_CURRENT_ROUTE = \"SET_CURRENT_ROUTE\",\n    ADD_RECEIVER_TO_HISTORY = \"ADD_RECEIVER_TO_HISTORY\"\n}","import React from \"react\";\nimport styles from \"./AppName.module.scss\";\n\nconst AppName = () => {\n  return <h2 className={styles.AppName}>Bank</h2>;\n};\n\nexport default AppName;\n","import React from \"react\";\nimport styles from \"./SideBar.module.scss\";\nimport AppName from \"../AppName/AppName\";\nimport { Link } from \"react-router-dom\";\nimport { IconContext } from \"react-icons\";\nimport {\n  BsCreditCard,\n  RiDashboardLine,\n  IoIosContacts,\n  IoMdAnalytics,\n  IoIosArrowForward,\n} from \"react-icons/all\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../../types/interfaces/store\";\n\nconst SideBar = () => {\n  const { currentRoute } = useSelector<AppState, any>((state) => ({\n    currentRoute: state.system.currentRoute,\n  }));\n  return (\n    <aside className={styles.SideBar}>\n      <AppName />\n      <ul>\n        <li\n          style={{\n            borderLeftColor:\n              currentRoute === \"DashBoard\" ? \"blue\" : \"transparent\",\n          }}\n        >\n          <Link\n            to=\"/dashboard\"\n            style={{\n              color: currentRoute === \"DashBoard\" ? \"blue\" : \"gray\",\n            }}\n          >\n            <IconContext.Provider\n              value={{\n                color: currentRoute === \"DashBoard\" ? \"blue\" : \"gray\",\n                size: \"20px\",\n              }}\n            >\n              <RiDashboardLine />\n            </IconContext.Provider>\n            <span>Dashboard</span>\n          </Link>\n        </li>\n        <li\n          style={{\n            borderLeftColor:\n              currentRoute === \"Reports\" ? \"blue\" : \"transparent\",\n          }}\n        >\n          <Link\n            to=\"/reports\"\n            style={{ color: currentRoute === \"Reports\" ? \"blue\" : \"gray\" }}\n          >\n            <IconContext.Provider\n              value={{\n                color: currentRoute === \"Reports\" ? \"blue\" : \"gray\",\n                size: \"20px\",\n              }}\n            >\n              <IoMdAnalytics />\n            </IconContext.Provider>\n            <span>Reports</span>\n          </Link>\n        </li>\n        <li\n          style={{\n            borderLeftColor: currentRoute === \"Cards\" ? \"blue\" : \"transparent\",\n          }}\n        >\n          <Link\n            to=\"/cards\"\n            style={{ color: currentRoute === \"Cards\" ? \"blue\" : \"gray\" }}\n          >\n            <IconContext.Provider\n              value={{\n                color: currentRoute === \"Cards\" ? \"blue\" : \"gray\",\n                size: \"20px\",\n              }}\n            >\n              <BsCreditCard />\n            </IconContext.Provider>\n            <span>Cards</span>\n          </Link>\n        </li>\n        <li\n          style={{\n            borderLeftColor:\n              currentRoute === \"Support\" ? \"blue\" : \"transparent\",\n          }}\n        >\n          <Link\n            to=\"/support\"\n            style={{ color: currentRoute === \"Support\" ? \"blue\" : \"gray\" }}\n          >\n            <IconContext.Provider\n              value={{\n                color: currentRoute === \"Support\" ? \"blue\" : \"gray\",\n                size: \"20px\",\n              }}\n            >\n              <IoIosContacts />\n            </IconContext.Provider>\n            <span>Support</span>\n          </Link>\n        </li>\n      </ul>\n      <Link to=\"/profile\">\n        <div className={styles.profile}>\n          <div className={styles.img}></div>\n          <h4>\n            <span>Hossam Alden</span>\n            <IconContext.Provider value={{ color: \"gray\" }}>\n              <IoIosArrowForward />\n            </IconContext.Provider>\n          </h4>\n        </div>\n      </Link>\n    </aside>\n  );\n};\n\nexport default SideBar;\n","import { SystemActionsTypes } from \"../types/enums/system\";\nimport { ReceiversHistoryEle } from \"../types/interfaces/system_api\";\n\nexport const SetCurrentRoute = (routeName: string) => (dispatch: Function) => {\n  const {SET_CURRENT_ROUTE} = SystemActionsTypes;\n  dispatch({ type: SET_CURRENT_ROUTE, payload: routeName });\n};\n// add receiver to the history\nexport const addReceiverToHistory = () => (dispatch: Function) => {\n  const { ADD_RECEIVER_TO_HISTORY} = SystemActionsTypes;\n  const historyEle = {\n    img: \"\",\n    date:  \"2021-Dec-16\",\n    name: \"John Doe\"\n  } as ReceiversHistoryEle\n  dispatch({ type: ADD_RECEIVER_TO_HISTORY, payload: historyEle });\n};","export enum TransTypes {\n    SUBMIT_TRANSFER = \"SUBMIT_TRANSFER\",\n    SUBMIT_TRANSFER_ERR = \"SUBMIT_TRANSFER_ERR\",\n    RECEIVER_NOT_FOUND = \"RECEIVER_NOT_FOUND\",\n    SET_TRANSACTION = \"SET_TRANSACTION\",\n    RECEIVE_MONEY = \"RECEIVE_MONEY\"\n}\nexport enum TransferStatus {\n    TRANS_LOADING = \"TRANS_LOADING\",\n    TRANS_ERR = \"TRANS_ERR\",\n}","import { GetReceiverBody, \n        GetReceiverParms, \n        ReceiveMoneyNotification, \n        SubmitTransferRes, \n        SubmitTransParms \n    } from \"../types/interfaces/trans_apis\";\nimport { TransTypes } from \"../types/enums/transactions\";\nimport { Client } from \"../types/interfaces/store\";\nconst api_url = process.env.REACT_APP_API_URL!;\n\n// make Transaction\nexport const getReceiver = (phone: GetReceiverParms) => async (dispatch: Function) => {\n    const {RECEIVER_NOT_FOUND, SET_TRANSACTION} = TransTypes;\n    // get receiver request body\n    const reqBody: GetReceiverBody = {receiverPhone: phone}\n    // request config object\n    const ReqConfig: RequestInit = {\n        method: \"POST\",\n        headers: {\"Content-type\": \"application/json\"},\n        body: JSON.stringify(reqBody)\n    }\n    // init request\n    const response = await fetch(`${api_url}/transfer/get_receiver`, ReqConfig);\n    // check if an error found\n    if(response.status !== 200) {\n        dispatch({type: RECEIVER_NOT_FOUND})\n        return\n    }\n    // Parse the Response\n    const receiver = await response.json() as Client;\n    dispatch({type: SET_TRANSACTION, payload: receiver})\n}\n// submit the transaction\nexport const submitTransfer = (data: SubmitTransParms) => async (dispatch: Function) => {\n   const {SUBMIT_TRANSFER_ERR, SUBMIT_TRANSFER} = TransTypes;\n  // get the token from the local storage\n  const token = localStorage.getItem(\"token\")!;\n  // req config obj\n  const ReqConfig: RequestInit = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      authorization: token\n    },\n    body: JSON.stringify(data)\n  }\n  // init request \n  const response = await fetch(`${api_url}/transfer/submit_transfer`, ReqConfig);\n  // check if an error\n  if(response.status !== 200) {\n      dispatch({type: SUBMIT_TRANSFER_ERR})\n      return\n  }\n  // Parsing response\n  const submitTransRes = await response.json() as SubmitTransferRes;\n  // if it done\n  dispatch({type: SUBMIT_TRANSFER, payload: submitTransRes})\n}\n// \nexport const receiveMoney = (notification: ReceiveMoneyNotification) => (dispatch: Function) => {\n  const {RECEIVE_MONEY} = TransTypes;\n  dispatch({type: RECEIVE_MONEY, payload: notification})\n} ","import React from \"react\";\nimport styles from \"./trans_loading.module.scss\";\n\nconst TransLoading = () => {\n  return <div className={styles.loader}></div>;\n};\n\nexport default TransLoading;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getReceiver } from \"../../../apis/transactions\";\nimport TransLoading from \"../../../components/TransLoading/TransLoading\";\nimport { TransferStatus } from \"../../../types/enums/transactions\";\nimport { AppState } from \"../../../types/interfaces/store\";\nimport { CurrentTransfer } from \"../../../types/interfaces/trans_reducer\";\nimport { GetReceiverComState } from \"./interface\";\nimport styles from \"./styles.module.scss\";\n\nfunction TransferMoney() {\n  // local state of component\n  const [state, setState] = useState<GetReceiverComState>({\n    receiverPhone: \"\",\n    isLoading: false,\n  });\n  // ref\n  const btnRef = useRef<HTMLButtonElement>(null);\n  // get data from the store\n  const currentTransfer = useSelector<AppState, CurrentTransfer>(\n    ({ transactions }) => transactions.currentTransfer\n  );\n  // dispatch store function\n  const dispatch = useDispatch();\n  // handle inputs of user\n  function inputHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    // update the state of component\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n  // component update and mount\n  useEffect(() => {\n    if (!state.receiverPhone) {\n      btnRef.current!.disabled = true;\n      return;\n    }\n    btnRef.current!.disabled = false;\n  });\n  // DO Transfer\n  function Transfer(e: React.FormEvent) {\n    // prevent default action of form\n    e.preventDefault();\n    // check\n    if (!state.receiverPhone) {\n      console.log(new Error(\"no phone entered\"));\n      return;\n    }\n    // get the receiver form the server\n    dispatch(getReceiver(state.receiverPhone));\n    // run the loading\n    setState({\n      ...state,\n      isLoading: true,\n    });\n  }\n  // whatch currentTransfer changes\n  useEffect(() => {\n    // if current transfer == transloading\n    if (currentTransfer !== TransferStatus.TRANS_LOADING) {\n      setState({\n        ...state,\n        isLoading: false,\n      });\n    }\n  }, [currentTransfer]);\n  return (\n    <div className={styles.MakeTransaction}>\n      <h4 className={styles.sectionName}>Quick Transfer</h4>\n      {/* select transfer type */}\n      <ul className={styles.transferTypesContainer}>\n        <li>Via Account No</li>\n        <li>Via Mobile No</li>\n      </ul>\n      {/* Transfer with phone number */}\n      <div className={styles.TransferWithPhone}>\n        {/* select country */}\n        <div className={styles.Country}>\n          <span></span>\n          <span>+249</span>\n        </div>\n        {/* phone numbrer input */}\n        <div className={styles.Phone}>\n          <input\n            type=\"number\"\n            name=\"receiverPhone\"\n            value={state.receiverPhone}\n            placeholder=\"Enter receiver phone\"\n            onChange={inputHandler}\n          />\n        </div>\n        {/* client image */}\n        <div className={styles.Img}></div>\n      </div>\n      {/* Do tranfer btn */}\n      <button onClick={Transfer} ref={btnRef} className={styles.transferBtn}>\n        {state.isLoading ? <TransLoading /> : \"Transfer\"}\n      </button>\n    </div>\n  );\n}\n// export component and connect it to the store\nexport default TransferMoney;\n","import React from \"react\";\nimport { SingleTrans } from \"../../types/interfaces/store\";\nimport { SingleTransProps } from \"./interface\";\nimport styles from \"./styles.module.scss\";\n\nconst SingleTransaction: React.FC<SingleTransProps> = (props) => {\n  const { receiver, amount } = props.transaction;\n  return (\n    <div className={styles.SingleTransaction}>\n      <div className={styles.Img}></div>\n      <div className={styles.container}>\n        <h3>Transfer To {receiver.name}</h3>\n        <p>Some Discription</p>\n      </div>\n      <h4>${amount}</h4>\n    </div>\n  );\n};\n\nexport default SingleTransaction;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../../../types/interfaces/store\";\nimport SingleTransaction from \"../../../components/SingleTransaction/component\";\nimport { TransHisProps } from \"./interface\";\nimport styles from \"./styles.module.scss\";\n\nfunction TransactionsHistory() {\n  const { transHistory } = useSelector<AppState, TransHisProps>(({ auth }) => ({\n    transHistory: auth.client?.transactionsHistory!,\n  }));\n  // transactions History\n  return (\n    <section className={styles.Transactions}>\n      <h4 className={styles.TransactionsDate}>Today 20-Jul-2020</h4>\n      {transHistory.map((singleTrans) => {\n        return <SingleTransaction transaction={singleTrans} />;\n      })}\n    </section>\n  );\n}\n\nexport default TransactionsHistory;\n","export enum AuthTypes {\n    AUTH_SUCCESS = \"AUTH_USER_SUCCESS\",\n    AUTH_FAILD = \"AUTH_USER_FAILD\",\n    LOGIN_SUCCESS = \"LOGIN_USER_SUCCESS\",\n    LOGIN_FAILD = \"LOGIN_USER_FAILD\",\n    SIGN_OUT = \"USER_SIGN_OUT\",\n    SET_CURRENT_ROUTE = \"SET_CURRENT_ROUTE\"\n}","import React from \"react\";\nimport { SingleReceiverProps } from \"./interface\";\nimport styles from \"./singlereceiver.module.scss\";\n\nconst SingleReceiver: React.FC<SingleReceiverProps> = (props) => {\n  const { date, name } = props.element;\n  return (\n    <div className={styles.singleReceiver}>\n      {/* receiver img */}\n      <span className={styles.img}></span>\n      {/* receiver name and date*/}\n      <span className={styles.details}>\n        <p className={styles.name}>{name}</p>\n        <p className={styles.date}>{date}</p>\n      </span>\n      {/* send again button */}\n      <button className={styles.sendBtn}>send</button>\n    </div>\n  );\n};\n\nexport default SingleReceiver;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport SingleReceiver from \"../../../components/SingleReceiver/SingleReceiver\";\nimport { AppState } from \"../../../types/interfaces/store\";\nimport { ReceiversHistoryEle } from \"../../../types/interfaces/system_api\";\nimport styles from \"./receviershistory.module.scss\";\nconst ReceviersHistory = () => {\n  const receiversHistory = useSelector<AppState, ReceiversHistoryEle[]>(\n    ({ system }) => system.receiversHistory\n  );\n  return (\n    <div className={styles.receviershistory}>\n      {receiversHistory.map((ele) => {\n        return <SingleReceiver element={ele} />;\n      })}\n      {receiversHistory.length === 0 ? (\n        <h1 className={styles.nodata}>No Data</h1>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default ReceviersHistory;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, Client } from \"../../../types/interfaces/store\";\nimport styles from \"./accountcard.module.scss\";\n\nconst AccountCard = () => {\n  // get data from redux store\n  const { account, _id } = useSelector<AppState, Client>(\n    ({ auth }) => auth.client!\n  );\n  // return template\n  return (\n    <div className={styles.accountCard}>\n      <h6>Your Balance</h6>\n      <p className={styles.Balance}>{`\\$${account.balance}`}</p>\n      <p className={styles.Account}>{`Saving A/C ${_id}`}</p>\n    </div>\n  );\n};\n\nexport default AccountCard;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { SetCurrentRoute } from \"../../apis/system\";\nimport styles from \"./Dashboard.module.scss\";\nimport TransferMoney from \"./transferMoney/component\";\nimport TransactionsHistory from \"./transactionsHistory/component\";\nimport ReceviersHistory from \"./ReceviersHistory/ReceviersHistory\";\nimport AccountCard from \"./AccountCard/AccountCard\";\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  // when component mount\n  useEffect(() => {\n    dispatch(SetCurrentRoute(\"DashBoard\"));\n  }, []);\n  // return the ui\n  return (\n    <div className={styles.DashBoard}>\n      <AccountCard />\n      <TransferMoney />\n      <TransactionsHistory />\n      <ReceviersHistory />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SetCurrentRoute } from \"../../apis/system\";\n\nconst Cards = (props: { setCurrentRoute: any }) => {\n  useEffect(() => {\n    const { setCurrentRoute } = props;\n    setCurrentRoute(\"Cards\");\n  }, []);\n  return <div className=\"\">cards</div>;\n};\n\nconst mapDispatch = (dispatch: Function) => {\n  return {\n    setCurrentRoute: (routeName: string) =>\n      dispatch(SetCurrentRoute(routeName)),\n  };\n};\n\nexport default connect(null, mapDispatch)(Cards);\n","import React, { useEffect } from \"react\";\nimport { SetCurrentRoute } from \"../../apis/system\";\nimport { connect } from \"react-redux\";\n\nconst Reports = (props: { setCurrentRoute: any }) => {\n  useEffect(() => {\n    const { setCurrentRoute } = props;\n    setCurrentRoute(\"Reports\");\n  }, []);\n  return <div className=\"\">Reports</div>;\n};\n\nconst mapDispatch = (dispatch: Function) => {\n  return {\n    setCurrentRoute: (routeName: string) =>\n      dispatch(SetCurrentRoute(routeName)),\n  };\n};\n\nexport default connect(null, mapDispatch)(Reports);\n","import React, { useEffect } from \"react\";\nimport { SetCurrentRoute } from \"../../apis/system\";\nimport { connect } from \"react-redux\";\n\nconst Support = (props: { setCurrentRoute: any }) => {\n  useEffect(() => {\n    const { setCurrentRoute } = props;\n    setCurrentRoute(\"Support\");\n  }, []);\n  return <div className=\"\">Support</div>;\n};\n\nconst mapDispatch = (dispatch: Function) => {\n  return {\n    setCurrentRoute: (routeName: string) =>\n      dispatch(SetCurrentRoute(routeName)),\n  };\n};\n\nexport default connect(null, mapDispatch)(Support);\n","import React from \"react\";\nimport { RiNotification2Line } from \"react-icons/ri\";\nimport { IconContext } from \"react-icons/lib\";\nimport styles from \"./notifications.module.scss\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../../types/interfaces/store\";\n\nconst Notifications = () => {\n  const { notifications } = useSelector<AppState, { notifications: number }>(\n    ({ system }) => ({ notifications: system.notifications.length })\n  );\n  return (\n    <span className={styles.notifications}>\n      <span className={styles.notificationsCount}>{notifications}</span>\n      <IconContext.Provider value={{ color: \"black\" }}>\n        <RiNotification2Line />\n      </IconContext.Provider>\n    </span>\n  );\n};\n\nexport default Notifications;\n","import React from \"react\";\nimport styles from \"./NavBar.module.scss\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { IconContext } from \"react-icons/lib\";\nimport { FiSearch } from \"react-icons/fi\";\nimport { NavBarProps } from \"./navbar.interface\";\nimport { AppState } from \"../../types/interfaces/store\";\nimport Notifications from \"../Notifications/Notifications\";\n\nconst NavBar = () => {\n  // get state from store\n  const { currentRoute } = useSelector<AppState, NavBarProps>((state) => ({\n    currentRoute: state.system.currentRoute,\n  }));\n  return (\n    <nav className={styles.NavBar}>\n      {/* <h2>{currentRoute}</h2> */}\n      <ul className={styles.AppCenter}>\n        <li>\n          <Link to=\"\">\n            <IconContext.Provider value={{ color: \"black\" }}>\n              <FiSearch />\n            </IconContext.Provider>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"\">\n            <Notifications />\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import { ClientCredentioal, LoginSuccess } from \"../types/interfaces/auth_apis\";\nimport {AuthTypes} from '../types/enums/auth'\nimport { Client } from \"../types/interfaces/store\";\nconst api_url = process.env.REACT_APP_API_URL!;\n\n// login client method\nexport const LoginClient = (Credentioal: ClientCredentioal) => async (dispatch: Function) => {\n  const {LOGIN_SUCCESS, LOGIN_FAILD} = AuthTypes;\n  // request configuration \n  const config = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n    body: JSON.stringify(Credentioal),\n  };\n\n  // sending data to the server\n  const response = await fetch(`${api_url}/auth/login`, config);\n  // check for status code\n  if(response.status !== 200) {\n    dispatch({type: LOGIN_FAILD})\n    return\n  }\n  const loginData = await response.json() as LoginSuccess;\n  // response data\n  dispatch({type: LOGIN_SUCCESS, payload: loginData})\n};\n// initate client function\nexport const InitateClient = () => async (dispatch: Function) => {\n  // Auth cases\n  const {AUTH_FAILD, AUTH_SUCCESS} = AuthTypes;\n  // get the token from the local storage\n  const token: string | null = localStorage.getItem(\"token\");\n  // check if token is exist\n  if (token) {\n    // request configuration object\n    const config: RequestInit = {\n      method: \"GET\",\n      headers: {\n        authorization: token,\n      },\n    };\n    // // send request to the server\n    const response = await fetch(`${api_url}/auth/initate_client`,config);\n    // check for the res status\n    if(response.status != 200){\n      dispatch({type: AUTH_FAILD})\n      return\n    }\n    // the response come from the server\n    const client = await response.json() as Client;\n    // dispatch action to the store\n    dispatch({type: AUTH_SUCCESS, payload: client})\n    return\n  }\n  dispatch({type: AUTH_FAILD})\n};\n// logout the client\nexport const SignOut = () => (dispatch: Function) => {\n  const {SIGN_OUT} = AuthTypes;\n  dispatch({ type: SIGN_OUT});\n};","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ProfileRoute_Props } from \"./profile.interface\";\nimport { SignOut } from \"../../apis/auth\";\nimport styles from \"./Profile.module.scss\";\nimport { SetCurrentRoute } from \"../../apis/system\";\n\nconst Profile = (props: ProfileRoute_Props) => {\n  const SignOut = (): void => {\n    const { signout_client } = props;\n    signout_client();\n    console.log(\"sign out\");\n  };\n\n  useEffect(() => {\n    const { setCurrentRoute } = props;\n    setCurrentRoute(\"Profile\");\n  }, []);\n  return (\n    <div className={styles.Profile}>\n      <button className={styles.SignOut_Btn} onClick={SignOut}>\n        Sign Out\n      </button>\n    </div>\n  );\n};\n\nconst mapDispatch = (dispatch: Function): ProfileRoute_Props => {\n  return {\n    setCurrentRoute: (routeName: string) =>\n      dispatch(SetCurrentRoute(routeName)),\n    signout_client: () => dispatch(SignOut()),\n  };\n};\n\nexport default connect(null, mapDispatch)(Profile);\n","import React, { Component } from \"react\";\nimport styles from \"./Home.module.scss\";\nimport SideBar from \"../../components/SideBar/SideBar\";\nimport { Route } from \"react-router-dom\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport Cards from \"../../components/Cards/Cards\";\nimport Reports from \"../Reports/Reports\";\nimport Support from \"../Support/Support\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport { connect } from \"react-redux\";\nimport Profile from \"../Profile/Profile\";\n\nclass Home extends Component<any> {\n  state = {};\n  render() {\n    return (\n      <section className={styles.Home}>\n        <SideBar />\n        <section className={styles.RoutesArea}>\n          <NavBar />\n          <Route component={Dashboard} path=\"/dashboard\" />\n          <Route component={Cards} path=\"/cards\" />\n          <Route component={Reports} path=\"/reports\" />\n          <Route component={Support} path=\"/support\" />\n          <Route component={Profile} path=\"/profile\" />\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default connect()(Home);\n","import React from \"react\";\nimport styles from \"./Loading.module.scss\";\n\nconst Loading = () => {\n  return <div className={styles.Loading}>\n    <div className={styles.loader}></div>\n  </div>;\n};\n\nexport default Loading;\n","import React from \"react\";\nimport styles from \"./LoginNav.module.scss\";\nimport AppName from \"../AppName/AppName\";\n\nconst LoginNav = () => {\n  return (\n    <header className={styles.LoginNav}>\n      <AppName />\n      <ul className={styles.NavLinks}>\n        <li>Agency</li>\n        <li>Sercives</li>\n        <li>Contact</li>\n      </ul>\n    </header>\n  );\n};\n\nexport default LoginNav;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./Login.module.scss\";\nimport LoginNav from \"../../components/LoginNav/LoginNav\";\nimport { FaFacebook, FaTwitter, FaInstagram } from \"react-icons/all\";\nimport { LoginState, LoginProps } from \"./login.interface\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LoginClient } from \"../../apis/auth\";\nimport { AppState } from \"../../types/interfaces/store\";\n\nconst Login = () => {\n  const [state, setState] = useState<LoginState>({\n    clientCredentioal: {\n      name: \"\",\n      password: \"\",\n    },\n    isLoading: false,\n  });\n  // dispatch\n  const dispatch = useDispatch();\n  const { isAuthorized } = useSelector<AppState, LoginProps>(({ auth }) => ({\n    isAuthorized: Boolean(auth.client),\n  }));\n  // component did mount\n  useEffect(() => {\n    if (isAuthorized) {\n      setState({\n        ...state,\n        isLoading: false,\n      });\n      // LogginClient();\n    }\n  }, [isAuthorized]);\n  // handle from change\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setState({\n      ...state,\n      clientCredentioal: {\n        ...state.clientCredentioal!,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n  // handle form submition\n  const handleSubmition = (e: React.FormEvent): void => {\n    e.preventDefault();\n    if (state.clientCredentioal!.name && state.clientCredentioal!.password) {\n      dispatch(LoginClient(state.clientCredentioal!));\n      setState({\n        ...state,\n        isLoading: true,\n      });\n    }\n  };\n  return (\n    <section className={styles.Login}>\n      <LoginNav />\n      <section className={styles.MainArea}>\n        <section className={styles.LoginForm}>\n          <h2>Login To Your Account !!</h2>\n          <form onSubmit={handleSubmition}>\n            <section>\n              <label htmlFor=\"\">E-mail</label>\n              <input\n                type=\"text\"\n                onChange={handleChange}\n                value={state.clientCredentioal!.name!}\n                name=\"name\"\n              />\n            </section>\n            <section>\n              <label htmlFor=\"\">Password</label>\n              <input\n                type=\"password\"\n                onChange={handleChange}\n                name=\"password\"\n                value={state.clientCredentioal!.password}\n              />\n            </section>\n            <button\n              type=\"submit\"\n              style={{\n                backgroundColor: state.isLoading ? \"dodgerblue\" : \"blue\",\n              }}\n            >\n              {state.isLoading ? \"authentacting\" : \"Login\"}\n            </button>\n          </form>\n          <a href=\"\" className={styles.ForgetPassword}>\n            Forget Password\n          </a>\n          <section className={styles.SocialMedia}>\n            <a href=\"\">\n              <FaInstagram />\n            </a>\n            <a href=\"\">\n              <FaTwitter />\n            </a>\n            <a href=\"\">\n              <FaFacebook />\n            </a>\n          </section>\n        </section>\n        <section className={styles.VectorsArea}>\n          <img src=\"\" alt=\"\" />\n        </section>\n      </section>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport styles from \"./Welcome.module.scss\";\nimport { Route } from \"react-router-dom\";\nimport Login from \"../Login/Login\";\n\nconst Welcome = () => {\n  return (\n    <section className={styles.Welcome}>\n      <Route exact path=\"/\" component={Login} />\n    </section>\n  );\n};\n\nexport default Welcome;\n","import React, { useState } from \"react\";\nimport styles from \"./styles.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPhone, faUniversity } from \"@fortawesome/free-solid-svg-icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { submitTransfer } from \"../../../apis/transactions\";\nimport { SubmitTransProps, SubmitTransState } from \"./interface\";\nimport { AppState, Client } from \"../../../types/interfaces/store\";\nimport { TransferStatus } from \"../../../types/enums/transactions\";\nimport { SubmitTransParms } from \"../../../types/interfaces/trans_apis\";\nimport TransLoading from \"../../../components/TransLoading/TransLoading\";\nimport { addReceiverToHistory } from \"../../../apis/system\";\n\nconst SubmitTrans = () => {\n  // the component state\n  const [state, setState] = useState<SubmitTransState>({\n    amount: 0,\n    isLoading: false,\n  });\n  // dispatch\n  const dispatch = useDispatch();\n  // get data from the redux store\n  const { currentTransfer } = useSelector<AppState, SubmitTransProps>(\n    ({ transactions }) => ({\n      currentTransfer: transactions.currentTransfer as Client,\n    })\n  );\n  // handle user inputs\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // update the state\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  };\n  // handle submition\n  const handleSubmition = (e: React.FormEvent) => {\n    e.preventDefault();\n    // make loading indecator\n    setState({\n      ...state,\n      isLoading: true,\n    });\n    // complete the transfer proccess by calling the api\n    const transaction = {\n      receiverPhone: currentTransfer!.phone,\n      amount: Number(state.amount),\n    } as SubmitTransParms;\n    // call the api and dispatch an action to the redux store\n    dispatch(submitTransfer(transaction));\n    dispatch(addReceiverToHistory());\n  };\n  return (\n    <section className={styles.ConfirmTransfer}>\n      <div className={styles.Container}>\n        <div className={styles.Header}>\n          <div className={styles.IMG}></div>\n          <h3 className={styles.Name}>\n            <span className={styles.firstName}>{currentTransfer.name}</span>\n            <span className={styles.lastName}>Mustafa</span>\n          </h3>\n        </div>\n        <div className={styles.Details}>\n          <div className={styles.DetailsContainer}>\n            <span>\n              <FontAwesomeIcon icon={faUniversity} />\n            </span>\n            <h4>Omdurman Branch</h4>\n          </div>\n          <div className={styles.DetailsContainer}>\n            <span>\n              <FontAwesomeIcon icon={faPhone} />\n            </span>\n            <h4>{currentTransfer!.phone}</h4>\n          </div>\n        </div>\n        <div className={styles.Submit}>\n          <input\n            type=\"number\"\n            value={state.amount}\n            name=\"amount\"\n            onChange={handleChange}\n          />\n          <button type=\"submit\" onClick={handleSubmition}>\n            {state.isLoading ? <TransLoading /> : \"Submit\"}\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\n// export component and connect it to store\nexport default SubmitTrans;\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home/Home\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { InitateClient } from \"./apis/auth\";\nimport { CompoProps } from \"./root.interface\";\nimport Loading from \"./components/Loading/Loading\";\nimport styles from \"./App.module.scss\";\nimport { AppState } from \"./types/interfaces/store\";\nimport Welcome from \"./pages/Welcome/Welcome\";\nimport ConfirmTransfer from \"./pages/Dashboard/SubmitTransfer/component\";\nimport { TransferStatus } from \"./types/enums/transactions\";\nimport { connect } from \"socket.io-client\";\nimport { receiveMoney } from \"./apis/transactions\";\nimport { ReceiveMoneyNotification } from \"./types/interfaces/trans_apis\";\n\nfunction App() {\n  // use dispatch to send action to the store, change the state of the store\n  const dispatch = useDispatch();\n  // get state from redux store\n  const { isLogged, currentTransfer, client_id } = useSelector<\n    AppState,\n    CompoProps\n  >((state) => ({\n    isLogged: state.auth.isLogged,\n    currentTransfer: state.transactions.currentTransfer,\n    client_id: state.auth.client?._id!,\n  }));\n  // play notification sound\n  const playNotificationSound = () => {\n    const tone = new Audio(\"/sounds/swiftly-610.mp3\");\n    tone.play();\n  };\n  // componet did update\n  useEffect(() => {\n    // quit if the client id dosnot ready\n    if (!client_id) {\n      return;\n    }\n    // connect the socket\n    const api_url = process.env.REACT_APP_API_URL!;\n    const socket = connect(`${api_url}`, {\n      query: {\n        client_id: client_id,\n      },\n    });\n    // listen to the sockets events\n    socket.on(\"notification\", (notification: ReceiveMoneyNotification) => {\n      // send the updated balance to the redux store\n      dispatch(receiveMoney(notification));\n      // play notification sound\n      playNotificationSound();\n    });\n  }, [client_id]);\n  // component did mount\n  useEffect(() => {\n    // apis call to decide if user is logged in or not\n    dispatch(InitateClient());\n  }, []);\n  // decide which component will be rendered\n  // null -> loading, false -> Welcome screen, true -> Home page\n  const component = isLogged === null ? Loading : isLogged ? Home : Welcome;\n  // current transfer faild status\n  const { TRANS_ERR, TRANS_LOADING } = TransferStatus;\n  // submit transfer modal\n  const SubmitTransferModal =\n    currentTransfer === TRANS_ERR || currentTransfer === TRANS_LOADING ? (\n      \"\"\n    ) : (\n      <ConfirmTransfer />\n    );\n  return (\n    <div className={styles.App}>\n      {/* submit transfer modal */}\n      {SubmitTransferModal}\n      {/* render Home page or Welcome page */}\n      <Switch>\n        <Route component={component} path=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import {AuthTypes} from '../../types/enums/auth'\nimport { TransTypes } from '../../types/enums/transactions';\nimport { LoginSuccess } from \"../../types/interfaces/auth_apis\";\nimport { AuthReducerState } from '../../types/interfaces/auth_reducer';\nimport { Client } from '../../types/interfaces/store';\nimport { ReceiveMoneyNotification, SubmitTransferRes } from '../../types/interfaces/trans_apis';\n\nconst initState = {\n  isLogged: null,\n  client: null,\n} as AuthReducerState;\n\nconst loginReducer = (state = initState,action: {type: string, payload: any}): AuthReducerState => {\n  const {LOGIN_SUCCESS, LOGIN_FAILD, SIGN_OUT, AUTH_FAILD, AUTH_SUCCESS} = AuthTypes;\n  const {SUBMIT_TRANSFER, RECEIVE_MONEY} = TransTypes;\n  switch (action.type) {\n    // initate client procces is succeed\n    case LOGIN_SUCCESS: {\n      const {token, client} = action.payload as LoginSuccess;\n      // store token in the local storage\n      localStorage.setItem(\"token\", `Bearer ${token}`)\n      return {\n        isLogged: true,\n        client\n      }\n    }\n    // in case of login faild\n    case LOGIN_FAILD: {\n      return {\n        isLogged: false,\n        client: null,\n      };\n    }\n    // client sign out\n    case SIGN_OUT: {\n      localStorage.setItem(\"token\", \"\");\n      return {\n        isLogged: false,\n        client: null,\n      };\n    }\n    // in case of auth faild\n    case AUTH_FAILD: {\n      return {\n        ...state,\n        isLogged: false\n      }\n    }\n    // in case of auth success\n    case AUTH_SUCCESS: {\n      const client = action.payload as Client\n      return {\n        isLogged: true,\n        client,\n      }\n    }\n    case SUBMIT_TRANSFER: {\n      const {newBalance, newTransaction} = action.payload as SubmitTransferRes;\n      const transHistory = [newTransaction, ...state.client?.transactionsHistory!]\n      return {\n        ...state,\n        client: {...state.client!, account: {balance: newBalance}, transactionsHistory: transHistory }\n      }\n    }\n    // Receive Money\n    case RECEIVE_MONEY: {\n      const {updatedBalance} = action.payload as ReceiveMoneyNotification\n      return {\n        ...state,\n        client: {\n          ...state.client!,\n          account: {\n            balance: updatedBalance!\n          }\n        }\n      }\n    }\n    default:\n      return state;\n  }\n};\nexport default loginReducer","import { SystemActionsTypes } from \"../../types/enums/system\";\nimport { TransTypes } from \"../../types/enums/transactions\";\nimport { ReceiversHistoryEle } from \"../../types/interfaces/system_api\";\nimport { SystemReducerState } from \"../../types/interfaces/system_reducer\";\nimport { ReceiveMoneyNotification } from \"../../types/interfaces/trans_apis\";\n\nconst initState = {\n    currentRoute: \"\",\n    notifications: [],\n    receiversHistory: []\n} as SystemReducerState\n\nconst systemReducer = (state = initState, action: {type: string, payload: any}): SystemReducerState => {\n    const {SET_CURRENT_ROUTE, ADD_RECEIVER_TO_HISTORY} = SystemActionsTypes;\n    const {RECEIVE_MONEY} = TransTypes;\n    switch (action.type) {\n        // set the route name\n        case SET_CURRENT_ROUTE: {\n            return {\n              ...state,\n              currentRoute: action.payload,\n            };\n        }\n        // receiver money notification\n        case RECEIVE_MONEY: {\n            const {sender, transAmount} = action.payload as ReceiveMoneyNotification\n            return {\n                ...state,\n                notifications: [{sender, transAmount, ...state.notifications}]\n            }\n        \n        }\n        // add receiversHistory ele\n        case ADD_RECEIVER_TO_HISTORY: {\n            const receiverEle = action.payload as ReceiversHistoryEle\n            return {\n                ...state,\n                receiversHistory: [receiverEle, ...state.receiversHistory]\n            }\n        }\n        default:\n        return state;\n    }\n}\nexport default systemReducer","import { TransferStatus, TransTypes } from \"../../types/enums/transactions\"\nimport { Client } from \"../../types/interfaces/store\";\nimport { TransState } from \"../../types/interfaces/trans_reducer\";\n\nconst initState = {\n    currentTransfer: TransferStatus.TRANS_LOADING,\n    submitTransfer: false\n} as TransState\n\nconst transactionsReducer = (state = initState, action: {type: string, payload: any}): TransState => {\n    const {SET_TRANSACTION, SUBMIT_TRANSFER, RECEIVER_NOT_FOUND, SUBMIT_TRANSFER_ERR} = TransTypes;\n    switch(action.type){\n        // an error when submit the transaction\n        case SUBMIT_TRANSFER_ERR: {\n            return state\n        }\n        // an error when get the receiver client\n        case RECEIVER_NOT_FOUND: {\n            return {\n                ...state,\n                currentTransfer: TransferStatus.TRANS_ERR,\n            }\n        }\n        // after successfuly geting the client \n        case SET_TRANSACTION: {\n            const receiver = action.payload as Client;\n            return {\n                ...state,\n                currentTransfer: receiver\n            }\n        }\n        case SUBMIT_TRANSFER: {\n            return {\n                ...state,\n                currentTransfer: TransferStatus.TRANS_LOADING,\n                submitTransfer: true\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\nexport default transactionsReducer","import { combineReducers } from \"redux\";\nimport loginReducer from \"./reducers/auth\";\nimport systemReducer from \"./reducers/system\";\nimport transactionsReducer from \"./reducers/transactions\";\n\nconst rootReducer = combineReducers({\n  auth: loginReducer,\n  system: systemReducer,\n  transactions: transactionsReducer\n});\nexport default rootReducer","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport default createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}